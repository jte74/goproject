// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: query.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
  name, firstname, age, password, datecreated
) VALUES (
  $1, $2, $3, $4, NOW()
)
RETURNING id, name, firstname, age, password, token, datecreated
`

func (q *Queries) CreateUser(ctx context.Context, arg User) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Name, arg.Firstname, arg.Age, arg.Password)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, firstname, age, password, token, datecreated FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Firstname,
		&i.Age,
		&i.Password,
		&i.Token,
		&i.Datecreated,
	)
	return i, err
}

const getUserWithName = `-- name: getUserWithName :one
SELECT id, name, firstname, age, password, token, datecreated FROM users
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetUserWithName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserWithName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Firstname,
		&i.Age,
		&i.Password,
		&i.Token,
		&i.Datecreated,
	)
	return i, err
}


const listUsers = `-- name: ListUsers :many
SELECT id, name, firstname, age, password, token, datecreated FROM users
ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Firstname,
			&i.Age,
			&i.Password,
			&i.Token,
			&i.Datecreated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
